#!/usr/bin/env python2

'''
Insert issue reference into commit message. The issue is deduced from branch
name. The following styles are supported:

 * feature/11, smth/42
 * issue-11, bug-42
 * s32, i32, n32
 * 23, 43

Issue is inserted into 3rd line of a commit message.
Example:
   Add authentication gem

   [#87369]
   # Please enter the commit message for your changes. Lines starting

'''

fmt = '[#%s]'

import subprocess as sp
import sys

def should_edit():
    '''
    Test if msg should be altered by the script.
    The target cases are:

    1. regular commit (not a merge or squash or fixup)
    2. there is no user message (no -m flag to commit)
    '''
    if len(sys.argv) == 2:
        return True
    if len(sys.argv) == 3 and sys.argv[2] == 'template':
        return True
    
    return False


def get_issue():
    '''
    Obtain issue number from a branch name
    '''
    cmd = 'git symbolic-ref --short HEAD'.split()
    branch = sp.check_output(cmd).strip()
    
    # Case 1: git flow style: 'worktype/freetext'
    # Example: feature/11, release/apr-12, hotfix/crash-on-rpy
    b = branch.split('/')
    if len(b) == 2 and b[1].isdigit():
        return b[1]

    # Case 2: worktype-number
    # Example: issue-11, bug-42
    b = branch.split('-')
    if len(b) == 2 and b[1].isdigit():
        return b[1]

    # Case 3: aNNN
    # Example: s32, i32, n32
    b = branch
    if b[0].isalpha() and b[1:].isdigit():
        return b[1:]

    # Case 4: NNN
    # Example: 23, 43
    b = branch
    if b.isdigit():
        return b
    
    return ''

def main():
    if not should_edit():
        return
    no = get_issue()
    if not no:
        return

    msg = open(sys.argv[1], 'r').read().splitlines()
    if not msg[0].strip():
        msg.insert(0, '')
    msg = msg[0:2] + [fmt % no] + msg[2:]
    msg = '\n'.join(msg)
    open(sys.argv[1], 'w').write(msg)


if __name__ == '__main__':
    main()

 
